<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2013-08-12T00:00:00Z</updated><entry><title>Um pouco sobre Linux e um pouco de história</title><link href="/um-pouco-sobre-linux-e-um-pouco-de-historia.html" rel="alternate"></link><updated>2013-08-12T00:00:00Z</updated><author><name></name></author><id>tag:,2013-08-12:um-pouco-sobre-linux-e-um-pouco-de-historia.html</id><summary type="html">&lt;p&gt;"Para entender o presente é preciso conhecer o passado" - Carl Sagan&lt;/p&gt;
&lt;p&gt;Nota: Coloquei os links que referenciam a Wikipédia apontando para os artigos em Inglês, você sempre pode procurar o link para a versão em Português na barra na lateral esquerda.&lt;/p&gt;
&lt;p&gt;Para entender o que é o Linux e o porque dele ser como é, é preciso saber como ele surgiu.&lt;/p&gt;
&lt;p&gt;Tudo começou quando a Bell Labs abandonou o projeto Multics, que visava desenvolver um sistema que fornecesse poder computacional num modelo semelhante ao que temos para energia elétrica, ou o de telefone fixa (Utility computing). Há uma frase erroneamente atribuída a Thomas Watson (nome do IBM Watson é uma homenagem a ele), "I think there is a world market for maybe five computers" ("eu acredito que no mundo haja um mercado para cinco computadores"), mas que parece não ser tão absurda com o aumento do uso de app e dispositivos móveis, que podem se interpretados como uma reencarnação dos Thin Clients e terminais, e Cloud Computing.&lt;/p&gt;
&lt;p&gt;Ken Thompson e Dennis Ritchie (que faleceu em outubro de 2011) resolveram criar uma versão simplificada do Multics numa máquina que estava sem uso. Pegando emprestado alguns conceitos do Multics eles escreveram na linguagem de máquina do minicomputador PDP-7 o que viria a ser chamado de Unix. Nessa primeira versão do Unix, ainda no PDP-7 foi criada a linguagem B, e uma parte do Unix foi reescrita em B, o que o tornou portátil, já que sem esse passo seria preciso reescrever o sistema inteiro na linguagem de máquina da plataforma alvo. C (ver K&amp;amp;R) só foi surgir quando o Unix foi portado para o PDP-11, uma máquina mais potente que precisou que a linguagem mudasse. Mais tarde o Unix foi reescrito em C.
Ken Thompson e Dennis Ritchie planejando dominar o mundo com o seu PDP-11
Nesses primeiros dias, os fontes do sistema eram distribuídos gratuitamente já que o valor na industria de TI da época era o hardware, a universidades e era estudados amplamente e usado em pesquisas. Em Berkeley foi criada a primeira distribuição baseada no código do Unix, chamada de Berkeley Software Distribution ou BSD, que mais tarde viria ser a base do Darwin (o Unix da Apple), por tanto ao OSX e iOS. Mas essa já é outra história. &lt;/p&gt;
&lt;p&gt;Do outro lado do atlântico algum tempo depois, um professor chamado Andrew Tanenbaum resolveu criar uma mini-versão do Unix para o IBM PC, chamada MINIX. O código cabia inteiro no livro que ele havia escrito sobre sistemas operacionais. Mais tarde Tanenbaum lideraria o desenvolvimento do sistema operacional distribuído Amoeba, onde Guido van Rossum viria sentir a necessidade de criar Python.&lt;/p&gt;
&lt;p&gt;De volta a terra do Tio Sam, Richard Stallman estava com problemas com uma impressora Xerox (Um dia escrevo uma artigo sobre a Xerox e o PARC), e se ofereceu para corrigir o bug que o incomodava, o que lhe parecia razoável, já que ele fazia parte do laboratório de inteligência artificial do MIT. Só que para isso, o fabricante da impressora pediu que ele assinasse um NDA (Non Disclosure Agreement ou Acordo de não divulgação). Para ele que respirava a cultura Hacker, era impensável não poder compartilhar as melhorias que ele fizesse com os outros hackers. Então o nosso amigo resolveu que ninguém nunca iria precisar assinar um NDA para poder modificar um software para adapta-lo para seu uso, e iniciou o projeto GNU (GNU (GNU (GNU is Not Unix) is Not Unix) is Not Unix). O Projeto GNU (gnu.org) visava criar um sistema operacional altamente portátil chamdo Emacs, digo, o Sistema Operacional GNU chamado GNU/Hurd, que é uma reimplementação livre de todos os componentes de um sistema Unix.&lt;/p&gt;
&lt;p&gt;Um GNU (Connochaetes gnou)
Richard Stallman começou sozinho escreveu o Emacs (um editor de texto poderoso, implementado e extensível num dialeto LISP chamado Elisp). Mais tarde pediu a Andrew Tanenbaun (o mesmo do MINIX), se ele poderia usar o Amsterdam Compiler Kit que ele havia escrito como o compilador do projeto GNU, mas Andrew disse que o compilador não era livre, então Stallman resolveu escrever o GCC (um compilador que se baseia em front-ends e back-ends para compilar inúmeras linguagens para inúmeras plataformas). Mais tarde outros começaram a se juntar a ele na tarefa de reescrever cada um dos programas que compõem um sistema Unix. O software produzido pelo projeto GNU é altamente portátil, foi, e é usado em uma grande variedades de sistemas Unix, devido a uma série de fatores, sedo o principal a possibilidade de modificar o código das aplicações. Só que no fim, ainda faltava um programa a ser substituído, o kernel. Era possível substituir todos os softwares proprietários de um sistema Unix por suas cópias equivalentes GNU, mas o substituto GNU para esse programa (o Hurd (Hird of Unix-Replacing Daemons)), que existe para gerenciar a máquina e os outros programas, ainda não estava pronto (e segue não sendo recomendado para sistemas em produção). Não era possível considerar o sistema livre sem um kernel livre. E é ai que entra na nossa história um tal de Linus Torvalds.&lt;/p&gt;
&lt;p&gt;O Sistema Operacional GNU... 
Um estudante Finlandês chamado Linux Torvalds comprou um IBM PC e instalou o MINIX nele, mas não foi muito com a cara do kernel (mais exatamente, micro-kernel) MINIX (e mais tarde com a o do criador dele) e achou que podia fazer melhor. Esse kernel melhor escrito por Linus, que ele chamou de Linux, foi aunuciado ao mundo e recebeu muitas contribuições (pull requests, para que vocês jovens possam entender). Algumas pessoas começaram a montar sistemas que juntavam esse kernel a os programas GNU e chamaram isso de distro Linux, o que deixou Richard Stallman muito #chateado, e até hoje ele tenta catequizar o mundo e pregar a palavra do GNU/Linux (GNU-slash-Linux), com algum sucesso.&lt;/p&gt;
&lt;p&gt;Espero que essa estorinha possa ter gerado interesse na história da computação, do Unix, do projeto GNU, do movimento OpenSource e um pouco na filosofia Hacker também.&lt;/p&gt;
&lt;p&gt;Bónus&lt;/p&gt;
&lt;p&gt;Timeline das distros Linux (ou GNU/Linux): http://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg&lt;/p&gt;
&lt;p&gt;Veja o canal do Youtube do Computer History museum: http://www.youtube.com/user/ComputerHistory/videos&lt;/p&gt;
&lt;p&gt;Dessa tradição Bell Labs / Unix / C surgiram ainda:
Plan 9: Um sistema operacional que teve o seu código aberto. Desenvolvido pela Bell Labs como sucessor do Unix, onde tudo é representado como um sistema de arquivos. Interessante notar que até mesmo os processos são representados como um sistema de arquivos, essa idéia foi copiada do Unix V8, e depois copiada pelo Linux e outros Unix e Unix-Like na forma da árvore /proc (recomendo rodar "ls /proc", só pela diversão) . Ainda, UTF-8 foi criada por Ken Thompson e Rob Pike e teve a sua primeira implementação no Plan 9.
9front: Um fork do Plan 9
Inferno: Sistema operacional também pela Bell Labs, fruto das experiências com o desenvolvimento do Plan 9. Escrito em C e Limbo, altamente portátil, roda numa máquina virtual register-based, que inspirou a VM Dalvik, usada no Android (que usa o Linux como seu Kernel). Agora, propriedade na Vita Nuova. É possível rodar ele como hóspede no Linux, Windows, Internet Explorer, OSX (Darwin), Plan 9, nativo em alguns hardwares, FreeBSD, Solaris, etc
Go lang: Linguagem desenvolvida por Ken Thompson (um dos inventorer do Unix, obviamente trabalhou no Plan 9) , Rob Pike (trabalhou no Plan 9) entre outros, e mais tarde teve ajuda do Russ Cox (também trabalhou no Plan 9), que elevou o nível das bibliotecas padrão. Começou com o objetivo de substituir C++ dentro do Google, reduzindo o tempo de compilação que chega a levar horas para algumas aplicações e melhorar o entendimento da interdepêndencia entre aplicações e bibliotecas, com um pouco da flexibilidade de Python (ambas, C++ e Python são amplamente usadas dentro do Google). Inspirada por C, Python, Limbo, CSP, Pascal, Oberon, Modula e Newsqueak. Não tava sabendo, mas o Grok Podcast começou uma série esses dias sobre Go http://www.grokpodcast.com/2013/07/17/episodio-95-golang/&lt;/p&gt;
&lt;p&gt;Recomendo uma pesquisa sobre a origem dos transistores e outras contribuições do grupo de R&amp;amp;D "fundado" por Alexander Graham Bell, inventor do Telephone.&lt;/p&gt;
&lt;p&gt;Sistemas operacionais que usam o kernel Hurd:
Debian/Hurd ou Debian/GNU/Hurd: O Sistema operacional Debian (ou GNU/Debian) usando o kernel GNU ao invés do Linux
Arch/Hurd: Sistema operacional Arch + o kernel GNU substituindo o Linux
GNU/Hurd: O Sistema operacional GNU. Totalmente livre e GNU.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Hospedando um site estático na sua conta do GitHub</title><link href="/hospedando-um-site-estatico-na-sua-conta-do-github.html" rel="alternate"></link><updated>2013-03-12T00:00:00Z</updated><author><name></name></author><id>tag:,2013-03-12:hospedando-um-site-estatico-na-sua-conta-do-github.html</id><summary type="html">&lt;p&gt;O primeiro passo é criar uma conta no GitHub se você ainda não tiver uma. Para criar uma conta grátis, vá em &lt;a href=""&gt;https://github.com/signup/free&lt;/a&gt; e se cadastre-se.&lt;/p&gt;
&lt;p&gt;Agora precisamos criar um novo repositório git na sua conta que vai ser o site. O nome desse repositório deve seguir o padrão nome_do_seu_usuario.github.com&lt;/p&gt;
&lt;p&gt;Para poder começar a criar o seu site você vai ter que clonar o esse repositório na rua máquina local. Para quem não está familiarizado com git, você deve rodar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/usuario/nome_do_seu_usuario.github.com.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A seguir vamos criar um arquivo HTML(no caso HTML5) básico no estilo "Hello, World!". Crie um arquivo chamado index.html na raiz do clone do seu repositório com o código a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
           Hello, World!
       &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Commite o arquivo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add index.html
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s1"&gt;&amp;#39;Commit inicial&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E faça o push para o github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aguarde alguns minutos para que o github identifique que esse repositório é uma pagina e depois acesse http://nome_do_seu_usuario.github.com&lt;/p&gt;
&lt;p&gt;Indo um pouco além do HTML escrito a mão, podemos usar um gerador de sites estáticos como o &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;. Com ele você pode escrever o seu site/blog em &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;, &lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; ou &lt;a href="http://www.methods.co.nz/asciidoc/index.html"&gt;AsciiDoc&lt;/a&gt; e deixar a geração do HTML para ele.&lt;/p&gt;
&lt;p&gt;Baseado no: &lt;a href=""&gt;http://yakattack-steel-trap.blogspot.com.br/2012/04/hosting-your-html-on-github.html&lt;/a&gt;&lt;/p&gt;</summary><category term="github"></category><category term="pelican"></category><category term="git"></category></entry></feed>